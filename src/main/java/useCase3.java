import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;

import static org.apache.spark.sql.functions.round;
import static org.apache.spark.sql.functions.sum;

/*
    Get the revenue generated by each customer for the month of 2014 January

        * Tables - orders, order_items and customers
        * Data should be sorted in descending order by revenue and then ascending order by customer_id
        * Output should contain customer_id, customer_first_name, customer_last_name, customer_revenue.
        * If there are no orders placed by customer, then the corresponding revenue for a give customer should be 0.
        * Consider only COMPLETE and CLOSED orders


 */
class demo3{
    void result()
    {
        SparkSession spark = SparkSession.builder().master("local").getOrCreate();

        String path = "C:\\JavaStuff\\src\\main\\retail_db\\orders\\part-00000";
        Dataset<Row> orders = spark.read().format("com.databricks.spark.csv").
                option("header", true).option("infer schema", true).load(path);

        String path_customers = "C:\\JavaStuff\\src\\main\\retail_db\\customers\\part-00000";
        Dataset<Row> customers = spark.read().format("com.databricks.spark.csv").
                option("header",true).option("infer schema",true).load(path_customers);

        String path_order_items = "C:\\JavaStuff\\src\\main\\retail_db\\order_items\\part-00000";
        Dataset<Row> order_items = spark.read().format("com.databricks.spark.csv").
                option("header",true).option("infer schema",true).load(path_order_items);

        Dataset<Row> joined = orders.
                join(customers,orders.col("order_customer_id").equalTo(customers.col("customer_id")))
                .join(order_items,orders.col("order_id").equalTo(order_items.col("order_item_order_id")));
        joined = joined.filter(orders.col("order_date").like("2014-01%"))
                .filter( orders.col("order_status").isin("COMPLETE","CLOSED"))
                .groupBy(customers.col("customer_id"),customers.col("customer_firstname"),customers.col("customer_lastname"))
                .agg(round(sum(order_items.col("order_item_subtotal")),2).alias("customer_revenue"));
        joined = joined
                .orderBy(joined.col("customer_id"),joined.col("customer_revenue").desc());
        joined.show();
    }

}

public class useCase3 {
    public static void main(String[] args) {
        demo3 s = new demo3();
        s.result();

    }
}

